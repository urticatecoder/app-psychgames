This project serves as a Minimum Viable Product delivered to researchers Dr. Mel win Khaw, Dr. Scott Huettel, and Dr. Rachel Kranton on November 19, 2020.

The code provided is currently deployed on Heroku at https://rise-to-the-top.herokuapp.com/ to develop a website used to conduct psychology research at Duke University.

Currently, the site is able to handle the following functionality:

1) Participants can enter the website by means of a login code, which is provided by a third-party website such as Prolific or Amazon Turk.
2) After logging in with a code that is approved by the site, users can wait in a lobby as other players join the study.
3) Once six users have joined the site, they are able to play two "video games" which collect user data.
    a) The first game studies group formation by means of encouraging users to collaboraet with one another to race to the top of the screen.
    b) The second game leverages these groups by encouraing participants to allocate resources to either benefit themselves, benefit their group, or harm the other group.
    c) Tutorials and Error Handling have been implemented in the frontend to ensure that the rules of each game are always upheld.
4) The user data from each of the two aforementioned games can be exported to a .csv file.
    a) This data is only accessible by means of a login page which only our clients have access to.
    b) Information can be downloaded by giving specific date ranges, allowing subsets of the user data to be selected at once.
5) Payouts are calculated by the backend to compensate participants for their time.
    a) This data is generated by calculating the rewards gained in Game One and Game Two, and is dependent on the users choices.

As of now, the site has the following bugs:

1) Confirming your choices in Game One before the animations have finished rendering will lead to overlapping staggered animations. This will cause the avatars to fly up and down the screen.
    a) This will be fixed over winter break by disabling the confirm button as the animations render.
2) Investing 10 tokens in one resource and then uninvesting 10 tokens in that same resource in Game Two will allow a user to invest negative tokens.
    a) This will be fixed over winter break by adding in a simple check to ensure that the number of tokens invested is now greater than the number of tokens given.
3) The number of players in the lobby will always say "Please wait while 5 other players join in."
    a) This is because the site is currently in "bot mode" such that a user always plays against bots rather than other random users.
    b) Once this functionality gets implemented fully, as described below, the text will be updated as players join the lobby.
    c) Note that code exists via the web socket call "join" which has code in both the frontend and backend. This bug only exists as the site currently prohibits real-time gaming against other opponents.
       Once this functionality is added for head-to-head gaming, then the code will be functional.
4) The site is not perfectly formatted for all screen sizes. Zooming in or shrinking the broswer size may cause the game to be oddly formatted.
    a) This will get fixed over winter break by changing the Mateial UI styling to always be proportional to screen size, rather than hard coded.

This website currently has one assumption. It assumes that if players were to engage in the experiment at the same time, then they would go through the experiment at the same speed.
Currently, our backend is set up to support real-time gaming between participants. That is, it is able to recieve decisions on each turn from multiple sources, calculate new locations, and send out these new locations.
However, a problem arises if, for example, a player never leaves the lobby. In this case, if a player stays in the lobby, he or she will never send in any decisions in Game One or Game Two. This would result in only five participants playing at once,
which would corrupt our data. So, our team has implemented a web socket call to check "passiveness"â€”which is defined as an instance in which a player refused to submit any decisions for a game over the course of multiple turns. If this occurs, the UI should prompt the player
to ensure that they are still playing. If they fail to respond, a bot can be plugged in, remedying the issue.

Currently, the backend is capable of supporting this "passivity" check and will send the web socket call. However, the UI is not ready to prompt the player, so this functionality will be added over winter break. Also, our team will
implement other measures to keep the game proceding at the same pace, such as adding timers to screens and playing the tutorials all at the same time, which will ensure that players must move through the experiment at the same pace together.

Lastly, the site has been tested on two platforms with varyling levels of comprehensiveness. The site has been tested manually and automatically on Google Chrome (Version 86.0.4240.183) by using Istanbul to generatet code coverage reports for playing through the site manually.
Selenium tetsts have also run on Chrome to ensure that all login pages function securely. The site has been manually tested on Safari (Version 13.1.2) and Firefox (Version 82.0.3) and performed as expected.


